from fastapi import FastAPI
from selenium import webdriver
from selenium.webdriver.common.by import By
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report

app = FastAPI()

# Função para treinar o modelo preditivo com mais dados e variáveis
def train_model():
    # Dados históricos (mais robustos, com mais variáveis)
    data = {
        "team1_score": [1, 2, 0, 3, 1, 2, 4, 1, 0, 3, 2, 1, 4, 2, 1],
        "team2_score": [0, 1, 1, 2, 0, 1, 3, 1, 2, 1, 2, 0, 3, 3, 0],
        "team1_odds": [1.5, 2.0, 3.5, 1.8, 2.2, 1.7, 2.3, 2.0, 2.5, 2.1, 1.6, 1.9, 1.8, 2.2, 2.0],
        "team2_odds": [2.5, 1.8, 1.5, 2.0, 3.0, 2.1, 1.9, 1.6, 2.0, 2.3, 2.0, 2.1, 2.3, 2.5, 2.2],
        "team1_recent_form": [4, 5, 3, 6, 2, 4, 7, 5, 6, 4, 5, 3, 7, 6, 6],
        "team2_recent_form": [3, 2, 5, 4, 6, 4, 3, 4, 5, 3, 4, 6, 3, 5, 4],
        "team1_injuries": [1, 0, 0, 2, 1, 0, 1, 0, 1, 1, 2, 0, 1, 1, 0],
        "team2_injuries": [0, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 0, 2, 1, 1],
        "team1_win_streak": [3, 4, 2, 5, 1, 3, 6, 4, 3, 2, 4, 3, 5, 4, 2],  # Nova variável
        "team2_win_streak": [2, 3, 3, 2, 4, 3, 2, 3, 4, 1, 3, 4, 2, 3, 3],
        "result": [1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2]  # 1 = vitória time 1, 2 = vitória time 2
    }
    
    df = pd.DataFrame(data)
    X = df.drop(columns=["result"])
    y = df["result"]
    
    # Divisão dos dados para treino e teste (para avaliar o modelo)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Random Forest com otimização de hiperparâmetros (usando GridSearch)
    rf_model = RandomForestClassifier(random_state=42)
    
    # Parâmetros para o GridSearch
    param_grid = {
        'n_estimators': [50, 100, 200],
        'max_depth': [10, 20, 30],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }
    
    grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
    grid_search.fit(X_train, y_train)
    
    # Melhor modelo com base no GridSearch
    best_model = grid_search.best_estimator_

    # Avaliação do modelo com dados de teste
    y_pred = best_model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Modelo treinado com precisão: {accuracy * 100:.2f}%")
    print("Relatório de Classificação:")
    print(classification_report(y_test, y_pred))
    
    return best_model

# Modelo preditivo treinado
model = train_model()

# Função do robô: coleta e análise de dados
def analyze_game_data():
    # Configura o WebDriver do Selenium
    driver = webdriver.Chrome()
    driver.get("https://example-bet-site.com")  # Substituir pelo site real
    
    # Coleta de dados de partidas
    elements = driver.find_elements(By.CLASS_NAME, "game-data")
    data = []
    for el in elements:
        match_data = {
            "team1_score": int(el.get_attribute("data-team1-score")),
            "team2_score": int(el.get_attribute("data-team2-score")),
            "team1_odds": float(el.get_attribute("data-team1-odds")),
            "team2_odds": float(el.get_attribute("data-team2-odds")),
            "team1_recent_form": int(el.get_attribute("data-team1-form")),
            "team2_recent_form": int(el.get_attribute("data-team2-form")),
            "team1_injuries": int(el.get_attribute("data-team1-injuries")),
            "team2_injuries": int(el.get_attribute("data-team2-injuries")),
            "team1_win_streak": int(el.get_attribute("data-team1-win-streak")),
            "team2_win_streak": int(el.get_attribute("data-team2-win-streak"))
        }
        data.append(match_data)
    driver.quit()
    
    # Converte dados para DataFrame
    df = pd.DataFrame(data)
    
    # Predição dos resultados
    df["prediction"] = model.predict(df[["team1_score", "team2_score", "team1_odds", "team2_odds", 
                                         "team1_recent_form", "team2_recent_form", 
                                         "team1_injuries", "team2_injuries", 
                                         "team1_win_streak", "team2_win_streak"]])
    
    # Encontra o jogo mais promissor
    best_match = df.loc[df["team1_odds"].idxmax()]  # Ou outra lógica
    
    return {
        "matches": df.to_dict(orient="records"),
        "best_match": best_match.to_dict()
    }

# Endpoint para análise
@app.post("/analyze")
def analyze():
    result = analyze_game_data()
    return result
